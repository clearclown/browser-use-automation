name: Automated Research Code Quality

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - stable
    paths:
      - 'automated_research/**/*.py'
      - '.github/workflows/automated-research-quality.yml'
  pull_request:
    paths:
      - 'automated_research/**/*.py'
      - '.github/workflows/automated-research-quality.yml'
  workflow_dispatch:

jobs:
  # Job 1: Linting and formatting
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --dev

      - name: Run ruff check
        run: |
          echo "🔍 Running ruff check on automated_research/"
          uv run ruff check automated_research/ --output-format=github

      - name: Run ruff format check
        run: |
          echo "🎨 Checking code formatting"
          uv run ruff format automated_research/ --check --diff

  # Job 2: Type checking
  typecheck:
    name: Type Check (Pyright)
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --dev

      - name: Run pyright
        run: |
          echo "🔍 Running pyright type checker"
          uv run pyright automated_research/ || echo "⚠️ Type check found issues (non-blocking)"

  # Job 3: Security check
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --dev

      - name: Run bandit security check
        run: |
          echo "🔒 Running security scan"
          uv run pip install bandit
          uv run bandit -r automated_research/ -f txt -o bandit-report.txt || true
          cat bandit-report.txt

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.txt
          retention-days: 30

  # Job 4: Documentation check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README files exist
        run: |
          echo "📚 Checking documentation files"

          # Required documentation files
          required_files=(
            "automated_research/README.md"
            "automated_research/QUICKSTART.md"
            "README.md"
            "docs/INDEX.md"
          )

          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done

          if [ ${#missing_files[@]} -ne 0 ]; then
            echo "❌ Missing documentation files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi

          echo "✅ All required documentation files present"

      - name: Check for TODO/FIXME comments
        run: |
          echo "🔍 Checking for unresolved TODOs in automated_research/"

          todos=$(grep -rn "TODO\|FIXME\|XXX" automated_research/ --include="*.py" || true)

          if [ -n "$todos" ]; then
            echo "⚠️ Found TODOs/FIXMEs in code:"
            echo "$todos"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚠️ Unresolved TODOs/FIXMEs" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$todos" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No TODOs/FIXMEs found"
          fi

  # Job 5: Summary
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [lint, typecheck, security, docs-check]
    if: always()

    steps:
      - name: Generate quality summary
        run: |
          echo "# 📊 Automated Research Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Quality Checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.lint.result }}" == "success" ]; then
            echo "✅ **Linting & Formatting**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Linting & Formatting**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.typecheck.result }}" == "success" ]; then
            echo "✅ **Type Checking**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Type Checking**: ISSUES FOUND (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "✅ **Security Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security Scan**: ISSUES FOUND" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.docs-check.result }}" == "success" ]; then
            echo "✅ **Documentation**: COMPLETE" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Documentation**: INCOMPLETE" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Code Quality Standard**: Maintained" >> $GITHUB_STEP_SUMMARY
